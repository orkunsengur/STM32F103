#include <stm32f10x.h>
#include "LCD.h"
#include "stm32f10x_rcc.h"
#include "stm32f10x_gpio.h"
#define I2C1_SLAVE_ADDRESS7 0x50//address for magnetometer
#define I2C_SPEED 100000 //50Khz speed for I2C


void I2C_Setup(void)
{
 
    GPIO_InitTypeDef  GPIO_InitStructure;
    I2C_InitTypeDef  I2C_InitStructure;

  
	
    /* I2C1 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);

    /* I2C1 SDA and SCL configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    /*SCL is pin06 and SDA is pin 07 for I2C1*/

    /* I2C1 configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;   // After a byte is received an ack will be returned
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit; // Bit 14 should be kept at 1 (datasheet)
    I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
    I2C_Init(I2C1, &I2C_InitStructure);
		  		  //enable I2C
    I2C_Cmd(I2C1,ENABLE);
}


void transmit(unsigned char address, unsigned char data)
{  
		
    /* initiate start sequence */
    //I2C_GenerateSTART(I2C1, ENABLE);
    /* check start bit flag */
    //while(!I2C_GetFlagStatus(I2C1, I2C_FLAG_SB)); //After reading SR1 register for SB bit, the SB bit is cleared
    
	
	
    // Wait until I2Cx is not busy anymore
    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));

    // Generate start condition
    I2C_GenerateSTART(I2C1, ENABLE);

    // Wait for I2C EV5. 
    // It means that the start condition has been correctly released 
    // on the I2C bus (the bus is free, no other devices is communicating))
    while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
		
	  
	
	  /*send write command to chip*/
		I2C_Send7bitAddress(I2C1, I2C1_SLAVE_ADDRESS7<<1, I2C_Direction_Transmitter); //select the slave device by sending its own address with write bit
    /*check master is now in Tx mode*/
    while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)); // SR1 ve SR2 registerlari kontrol edilir. 
    /*mode register address*/
    I2C_SendData(I2C1,address);
    /*wait for byte send to complete*/
    while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
    /*clear bits*/
    I2C_SendData(I2C1, data);
    /*wait for byte send to complete*/
    while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
    /*generate stop*/
    I2C_GenerateSTOP(I2C1, ENABLE);
    /*stop bit flag*/
    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF));
		
}



void Receive(unsigned char address, unsigned char *XMSB)
{
    //unsigned char XMSB,XLSB,YMSB,YLSB,ZMSB,ZLSB; /* variables to store temporary values in */

    /*left align address*/
    /*re-enable ACK bit incase it was disabled last call*/
    I2C_AcknowledgeConfig(I2C1, ENABLE);
    /* Test on BUSY Flag */
    while (I2C_GetFlagStatus(I2C1,I2C_FLAG_BUSY)); // If a communication is ongoing it will wait until a stop condition
    /* Enable the I2C peripheral */
/*======================================================*/
    I2C_GenerateSTART(I2C1, ENABLE);  // Start condition
    /* Test on start flag */
    while (!I2C_GetFlagStatus(I2C1,I2C_FLAG_SB)); // Checking start bit
    /* Send device address for write */
    I2C_Send7bitAddress(I2C1, I2C1_SLAVE_ADDRESS7<<1, I2C_Direction_Transmitter);
    /* Test on master Flag */
    while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
    /* Send the device's internal address to write to */
    I2C_SendData(I2C1,address);
    /* Test on TXE FLag (data sent) */
    while (!I2C_GetFlagStatus(I2C1,I2C_FLAG_TXE));
/*=====================================================*/
      /* Send START condition a second time (Re-Start) */
    I2C_GenerateSTART(I2C1, ENABLE);
    /* Test start flag */
    while (!I2C_GetFlagStatus(I2C1,I2C_FLAG_SB));
    /* Send address for read */
    I2C_Send7bitAddress(I2C1, I2C1_SLAVE_ADDRESS7<<1, I2C_Direction_Receiver);
    /* Test Receive mode Flag */
    while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
    /* load in all 6 registers */
    while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED));
    *XMSB = I2C_ReceiveData(I2C1);
 /*   
	 while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED));
    XLSB = I2C_ReceiveData(I2C1);
    while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED));
    YMSB = I2C_ReceiveData(I2C1);
    while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED));
    YLSB = I2C_ReceiveData(I2C1);
    while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED));
    ZMSB = I2C_ReceiveData(I2C1);
    while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED));
    ZLSB = I2C_ReceiveData(I2C1); */    
    /*enable NACK bit */
    I2C_NACKPositionConfig(I2C1, I2C_NACKPosition_Current);
    I2C_AcknowledgeConfig(I2C1, DISABLE);
    
    /* Send STOP Condition */
    I2C_GenerateSTOP(I2C1, ENABLE);
    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF)); // stop bit flag
    
    /*sort into 3 global variables*/
	/*	
    X = ((XMSB<<8) | XLSB);
    Y = ((YMSB<<8) | YLSB);
    Z = ((ZMSB<<8) | ZLSB);  */
}




int main()
{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
		GPIOA->CRL=0x22222222;	
	  unsigned char data1,data2,data3,data4,data5;
		char name[10];
		LCD_Init();
	  I2C_Setup();
		transmit(0x00,'A');
	  mydelay(5);
		transmit(0x08,'B');
		mydelay(5);
		transmit(0x10,'C');
		mydelay(5);
		transmit(0x18,'D');
		mydelay(5);
		transmit(0x20,'E');
		mydelay(5);
		Receive(0x00,&data1);
		Receive(0x08,&data2);
		Receive(0x10,&data3);
		Receive(0x18,&data4);
		Receive(0x20,&data5);
	  
		//sprintf(name,"%c%c%c%c%c",data1,data2,data3,data4,data5);
		
		LCD_MoveCursor(1,1);
		
		LCD_WriteString(name);
		while(1)
		{
			;
		}
}














